{# helper-macro zum mergen der vlans aufrufen #}
{% import 'functions/helpers.j2' as helpers with context %}
{% set vlans_merged = ({}) %}
{{ helpers.merge_vlans(group.vlan_areas, vlans_merged) }}


{############################################################}
{# system config template macro #}

{% macro junos_system() -%}
/* Config generiert durch Ansible */
system {
    host-name {{ inventory_hostname }};
    domain-name {{ domain_name }};
    time-zone {{ time_zone }};
    no-redirects;
    authentication-order [ tacplus password ];
    root-authentication {
        encrypted-password "{{ root_password }}"; ## SECRET-DATA
    }
    name-server {
    {% for namesrv in dns.servers %}
        {{ namesrv }};
    {% endfor %}
    }
    tacplus-server {
    {% for tacsrv in tacacs.servers %}
        {{ tacsrv.ip }} {
            port 49;
            secret "{{ tacsrv.secret }}"; ## SECRET-DATA
            timeout 10;
            single-connection;
            source-address {{ mgmt_host.v4_addr }};
        }
    {% endfor %}
    }
    login {
		announcement "\n\t####   SYSTEM CONFIG GENERIERT DURCH ANSIBLE   ####\n\n\tManuelle Aenderungen per CLI werden ueberschrieben!\n\n\tInfos zur Konfiguration:\n\thttps://wiki.intern.example.com/x/coAhAQ\n\n\n";
        class rancid {
            permissions [ access admin firewall flow-tap interface network routing secret security snmp system trace view ];
        }
    {% for usr in users %}
        user {{ usr.name }} {
            uid {{ usr.uid }};
            class {{ usr.class }};
            {% if usr.passwd is defined %}
            authentication {
                encrypted-password "{{ usr.passwd }}"; ## SECRET-DATA
            }
            {% elif usr.ssh_key is defined %}
            authentication {
                ssh-rsa "{{ usr.ssh_key }}"; ## SECRET-DATA
            }
            {% endif %}
        }
    {% endfor %}
    }
    services {
        ssh {
            root-login deny;
            protocol-version v2;
            rate-limit 10;
        }
        netconf {
            ssh;
        }
    }
    syslog {
        user * {
            any emergency;
        }
        file messages {
            any notice;
            authorization info;
        }
        file interactive-commands {
            interactive-commands any;
        }
    }
    ntp {
    {% for ntpsrv in ntp.servers %}
        server {{ ntpsrv }};
    {% endfor %}
    }
}
{%- endmacro %}

{############################################################}
{# chassis config template macro #}

{% macro junos_chassis() -%}
chassis {
    {% set ns = namespace(ae_devices=false,ae_count=0) %}
    {% for _iface in interfaces if 'ae' in _iface %}
        {% set ns.ae_count = ns.ae_count + 1 %}
        {% set ns.ae_devices = true %}
    {% endfor %}
    {% if ns.ae_devices == true %}
    aggregated-devices {
        ethernet {
            device-count {{ ns.ae_count }};
        }
    }
    {% endif %}
    alarm {
        management-ethernet {
            link-down ignore;
        }
    }
}
{%- endmacro %}

{############################################################}
{# 'sub-macro' fuer interface unit config, verwendet in interfaces und interface ranges #}

{% macro int_unit(int, int_name) -%}
    {% if int.desc is defined %}
    description "{{ int.desc }}";
    {% endif %}
    {% if int.disable is defined and int.disable == true %}
        disable;
    {% endif %}
    {% if int.mtu is defined %}
        mtu {{ int.mtu }};
    {% endif %}
    {% if int.etheroptions is defined %}
        ether-options {
        {% if int.etheroptions.lacp_interface is defined %}
            802.3ad {{ int.etheroptions.lacp_interface }};
        {% endif %}
        {% if int.etheroptions.no_autoneg is defined and int.etheroptions.no_autoneg == true %}
            no-auto-negotiation;
        {% endif %}
        {% if int.etheroptions.duplex is defined and int.etheroptions.duplex == 'full' %}
            link-mode full-duplex;
        {% elif int.etheroptions.duplex is defined and int.etheroptions.duplex == 'half' %}
            no-flow-control;
            link-mode half-duplex;
        {% endif %}
        {% if int.etheroptions.speed is defined %}
            speed {
                {{ int.etheroptions.speed }};
            }
        {% endif %}
        }
    {% endif %}
    {% if 'ae' in int_name %}
        aggregated-ether-options {
            lacp {
                active;
            }
        }
    {% endif %}
    {% if (int.mode is defined or
           int.vlans is defined or
           int.vlan_areas is defined) %}
        unit 0 {
            family ethernet-switching {
            {% if int.mode is defined %}
                port-mode {{ int.mode }};
            {% endif %}
            {% if int.vlans is defined %}
                vlan {
                    members{{' '}}
                {%- if int.vlans == 'all' -%}
                    all;
                {% elif int.vlans is number -%}
                    {{ vlans_merged[int.vlans] }};
                {% elif int.vlans is sequence -%}
                    [ {% for vln in int.vlans|sort %}{{ vlans_merged[vln] }} {% endfor %}];
                {% endif %}
                }
            {% elif int.vlan_areas is defined %}
            {% set int_vlans_merged = ({}) %}
            {{ helpers.merge_vlans(int.vlan_areas, int_vlans_merged) }}
                vlan {
                    members [ {% for vlns in int_vlans_merged|sort %}{{ int_vlans_merged[vlns] }} {% endfor %}];
                }
            {% endif %}
            {% if int.native is defined %}
                native-vlan-id {{ int.native }};
            {% endif %}
            }
        }
    {%- endif %}
{%- endmacro %}

{# interfaces config template macro #}

{% macro junos_interfaces() -%}
interfaces {
    {% for _ifrange in if_ranges|sort %}
    {% set ifrange = if_ranges[_ifrange] %}
    interface-range {{ _ifrange }} {
        {% if ifrange.member_ranges is defined %}
            {% if ifrange.member_ranges is string %}
        member-range {{ ifrange.member_ranges }};
            {% elif ifrange.member_ranges is sequence %}
                {% for rng in ifrange.member_ranges %}
        member-range {{ rng }};
                {% endfor %}
            {% endif %}
        {% endif %}
        {% if ifrange.members is defined %}
            {% if ifrange.members is string %}
        member {{ ifrange.members }};
            {% elif ifrange.members is sequence %}
                {% for intf in ifrange.members %}
        member {{ intf }};
                {% endfor %}
            {% endif %}
        {% endif %}
    {{ int_unit(ifrange, _ifrange) }}
    }
    {% endfor %}
    {% for _iface in interfaces|sort %}
    {% set iface = interfaces[_iface] %}
    {{ _iface }} {
    {{ int_unit(iface, _iface) }}
    }
    {% endfor %}
    me0 {
        unit 0 {
            description "{{ inventory_hostname }} local OOB Mgmt";
            family inet {
                address 169.254.1.1/16;
            }
            family inet6;
        }
    }
    vlan {
        unit {{ mgmt_shared.vlan }} {
            description "{{ inventory_hostname }} Mgmt";
            family inet {
                address {{ mgmt_host.v4_addr }}/24;
            }
            family inet6 {
                address {{ mgmt_host.v6_addr }}/64;
            }
        }
    {% if vlan_units is defined %}
        {% for _unit in vlan_units %}
        {% set unit = vlan_units[_unit] %}
        unit {{ _unit }} {
            {% if unit.desc is defined %}
            description "{{ unit.desc }}";
            {% endif %}
            {% if unit.v4 is defined %}
            family inet {
                {% for _addr in unit.v4.addr %}
                {% set addr = unit.v4[_addr] %}
                address {{ _addr }};
                {% endfor %}
            }
            {% endif %}
            {% if unit.v6 is defined %}
            family inet6 {
                {% for _addr in unit.v6.addr %}
                {% set addr = unit.v6[_addr] %}
                address {{ _addr }};
                {% endfor %}
            }
            {% endif %}
        }
        {% endfor %}
    {% endif %}
    }
}
{%- endmacro %}

{############################################################}
{# snmp config template macro #}

{% macro junos_snmp() -%}
snmp {
    location "{{ location }}";
    contact "{{ snmp.contact }}";
    community {{ snmp.community }} {
        authorization read-only;
    }
    trap-group default {
        categories {
            authentication;
            chassis;
            link;
            remote-operations;
            routing;
            startup;
            rmon-alarm;
            vrrp-events;
            configuration;
        }
        targets {
        {% for snmpsrv in snmp.servers %}
            {{ snmpsrv }};
        {% endfor %}
        }
    }
}
{%- endmacro %}

{############################################################}
{# routing-options config template macro #}

{% macro junos_routing_options() -%}
routing-options {
    rib inet6.0 {
        static {
            route ::/0 next-hop {{ mgmt_shared.v6_defaultgw }};
        }
    }
    static {
        route 0.0.0.0/0 next-hop {{ mgmt_shared.v4_defaultgw }};
    }
}
{%- endmacro %}

{############################################################}
{# protocols config template macro ex intern access #}

{% macro junos_protocols_ex_ia() -%}
protocols {
    igmp-snooping {
        vlan all;
    }
    {% if dot1x is defined and dot1x == true %}
    dot1x {
        authenticator {
            authentication-profile-name PNAC1;
            interface {
                access-dot1x {
                    supplicant multiple;
                    guest-vlan VL1900_Service-Support;
                    server-reject-vlan VL1900_Service-Support;
                    server-fail use-cache;
                }
            }
        }
    }
    {% endif %}
    mstp {
        configuration-name interes-netz-2015;
        revision-level 1;
        bridge-priority {{ mstp.bridge_prio }};
    {% for _iface in interfaces %}
        {% set iface = interfaces[_iface] %}
        {% if (iface.mstp is defined and iface.mstp == 'disable') %}
        interface {{ _iface }}.0 {
            disable;
        }
        {% endif %}
    {% endfor %}
        interface access-ports {
            edge;
        }
        interface switch-links {
            bpdu-timeout-action {
                block;
            }
        }
        msti 1 {
            bridge-priority {{ mstp.bridge_prio }};
            vlan 1300-2399;
        }
        msti 2 {
            bridge-priority {{ mstp.bridge_prio }};
            vlan 2400-3399;
        }
        msti 3 {
            bridge-priority {{ mstp.bridge_prio }};
            vlan 3400-4094;
        }
        bpdu-block-on-edge;
    }
    lldp {
        port-id-subtype interface-name;
        interface switch-links;
    }
    lldp-med {
        interface access-ports;
    }
}
{%- endmacro %}

{# protocols config template macro ex intern core #}

{% macro junos_protocols_ex_ic() -%}
protocols {
    mstp {
        configuration-name interes-netz-2015;
        revision-level 1;
        bridge-priority {{ mstp.bridge_prio }};
    {% for _iface in interfaces %}
        {% set iface = interfaces[_iface] %}
        {% if (iface.mstp is defined and iface.mstp == 'disable') %}
        interface {{ _iface }}.0 {
            disable;
        }
        {% endif %}
    {% endfor %}
        interface downlinks {
            no-root-port;
        }
        interface xlinks {
            bpdu-timeout-action {
                block;
            }
        }
        msti 1 {
            bridge-priority {{ mstp.msti_1_prio }};
            vlan 1300-2399;
        }
        msti 2 {
            bridge-priority {{ mstp.msti_2_prio }};
            vlan 2400-3399;
        }
        msti 3 {
            bridge-priority {{ mstp.msti_3_prio }};
            vlan 3400-4094;
        }
        bpdu-block-on-edge;
    }
    lldp {
        port-id-subtype interface-name;
        interface downlinks;
        interface xlinks;
    }
}
{%- endmacro %}

{############################################################}
{# access config template macro #}

{% macro junos_access() -%}
{% if dot1x is defined and dot1x == true %}
access {
    radius-server {
    {% for radiussrv in radius.servers %}
        {{ radiussrv.ip }} secret "{{ radiussrv.secret }}"; ## SECRET-DATA
    {% endfor %}
    }
    profile PNAC1 {
        authentication-order radius;
        radius {
            authentication-server {% if radius.servers|length < 2 %}{{ radius.servers[0].ip }};
            {% else %}[ {% for radiussrv in radius.servers %}{{ radiussrv.ip }} {% endfor %}];
            {% endif %}
        }
    }
}
{% endif -%}
{%- endmacro %}

{############################################################}
{# ethernet_switching_options config template macro #}

{% macro junos_ethernet_switching_options() -%}
ethernet-switching-options {
    storm-control {
        interface all;
    }
    {% for _iface in interfaces %}
    {% set iface = interfaces[_iface] %}
        {% if (iface.mstp is defined and iface.mstp == 'disable') %}
    bpdu-block {
        interface {{ _iface }}.0 {
            drop;
        }
    }
        {% endif %}
    {% endfor %}
}
{%- endmacro %}

{############################################################}
{# vlans config template macro #}

{% macro junos_vlans() -%}
vlans {
    {% for vln_id in vlans_merged|sort %}
    {{ vlans_merged[vln_id] }} {
        vlan-id {{ vln_id }};
        {% if vln_id == mgmt_shared.vlan %}
        l3-interface vlan.{{ vln_id }};
        {% endif %}
        {% if vlan_units is defined %}
            {% for unit in vlan_units %}
                {% if vln_id == unit %}
        l3-interface vlan.{{ vln_id }};
                {% endif %}
            {% endfor %}
        {% endif %}
    }
    {% endfor %}
}
{%- endmacro %}

{############################################################}
{# poe config template macro #}

{% macro junos_poe() -%}
poe {
    interface all;
    {% if poe is defined %}
        {% if poe.static == true %}
    management static;
            {% for iface in interfaces %}
    interface {{ iface }} {
        maximum-power {{ poe.interface_max_power }};
    }
            {% endfor %}
        {% endif %}
    {% endif %}
}
{%- endmacro %}