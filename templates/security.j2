{# security config template macro #}

{% macro junos_srx() -%}
security {
    alg {
        ftp ftps-extension;
        sip disable;
    }
    forwarding-options {
        family {
            inet6 {
                mode flow-based;
            }
        }
    }
    flow {
        tcp-mss {
            all-tcp {
                mss 1350;
            }
            ipsec-vpn {
                mss 1350;
            }
        }
    }
    screen {
        ids-option untrust-screen {
            icmp {
                ip-sweep threshold 1000;
                fragment;
                large;
                ping-death;
            }
            ip {
                source-route-option;
                tear-drop;
            }
            tcp {
                fin-no-ack;
                port-scan threshold 1000;
                syn-flood {
                    alarm-threshold 1024;
                    attack-threshold 200;
                    source-threshold 1024;
                    destination-threshold 2048;
                    timeout 20;
                }
                land;
            }
            udp {
                flood threshold 10000;
            }
            limit-session {
                source-ip-based 200;
            }
        }
    }
    nat {
        source {
{% for pool in source_nat.pools %}
            pool {{ pool }} {
                address {
                    {{ source_nat.pools[pool] }};
                }
            }
{% endfor %}
            pool-utilization-alarm raise-threshold 80;
{% for ruleset_name in source_nat.rule_sets %}
{% set ruleset = source_nat.rule_sets[ruleset_name] %}
            rule-set {{ ruleset_name }} {
                from zone {{ ruleset.fromzone }};
    {% if ruleset.tozone is sequence and ruleset.tozone is not string %}
                to zone [ {% for _zone in ruleset.tozone %}{{ _zone }} {% endfor %}];
    {% else %}
                to zone {{ ruleset.tozone }};
    {% endif %}
    {% if ruleset.rules is defined %}
        {% for rule_name in ruleset.rules %}
        {% set rule = ruleset.rules[rule_name] %}
            {{ subtemplate_srcnatrule(rule, rule_name) }}
        {% endfor %}
    {% else %}
            {{ subtemplate_srcnatrule(ruleset, ruleset_name) }}
    {% endif %}
            }
{% endfor %}
        }
{% if destination_nat is defined %}
        destination {
{% for pool_name in destination_nat.pools %}
{% set pool = destination_nat.pools[pool_name] %}
            pool {{ pool_name }} {
                address {{ pool.address }} port {{ pool.port }};
            }
{% endfor %}
{% for ruleset_name in destination_nat.rule_sets %}
{% set ruleset = destination_nat.rule_sets[ruleset_name] %}
            rule-set {{ ruleset_name }} {
                from zone {{ ruleset.fromzone }};
    {% if ruleset.rules is defined %}
        {% for rule_name in ruleset.rules %}
        {% set rule = ruleset.rules[rule_name] %}
            {{ subtemplate_destnatrule(rule, rule_name) }}
        {% endfor %}
    {% else %}
            {{ subtemplate_destnatrule(ruleset, ruleset_name) }}
    {% endif %}
            }
{% endfor %}
        }
{% endif %}
{% if proxy_arp is defined %}
        proxy-arp {
    {% for entry in proxy_arp %}
            interface {{ entry.interface }} {
                address {
                    {{ entry.address }};
                }
            }
    {% endfor %}
        }
{% endif %}
    }
    policies {
{% for policy_name in policies %}
{% set policy = policies[policy_name] %}
        from-zone {{ policy.fromzone }} to-zone {{ policy.tozone }} {
            policy {{ policy_name }} {
                match {
    {% if policy.source is sequence and policy.source is not string %}
                    source-address [ {% for _src in policy.source %}{{ _src }} {% endfor %}];
    {% else %}
                    source-address {{ policy.source }};
    {% endif %}
    {% if policy.destination is sequence and policy.destination is not string %}
                    destination-address [ {% for _dest in policy.destination %}{{ _dest }} {% endfor %}];
    {% else %}
                    destination-address {{ policy.destination }};
    {% endif %}
    {% if policy.application is sequence and policy.application is not string %}
                    application [ {% for _app in policy.application %}{{ _app }} {% endfor %}];
    {% else %}
                    application {{ policy.application }};
    {% endif %}
                }
                then {
                    {{ policy.action }};
                }
            }
        }
{% endfor %}
    }
    zones {
{% for zone_name in zones %}
{% set zone = zones[zone_name] %}
        security-zone {{ zone_name }} {
    {% if not zone_name == 'untrust' %}
            tcp-rst;
    {% endif %}
            address-book {
    {% for addr in zone.addresses %}
                address {{ addr }} {{ zone.addresses[addr] }};
    {% endfor %}
    {% if zone.addrsets is defined %}
        {% for addrset_name in zone.addrsets %}
        {% set addrset = zone.addrsets[addrset_name] %}
                address-set {{ addrset_name }} {
            {% if addrset is sequence %}
                {% for addr in addrset %}
                    address {{ addr }};
                {% endfor %}
            {% endif %}
                }
        {% endfor %}
    {% endif %}
            }
            host-inbound-traffic {
                system-services {
{{ inbound_services(zone, zone_name, false) }}
                }
    {% if not zone_name == 'untrust' %}
                protocols {
        {% if zone.allowed_inbound_services is defined and zone.allowed_inbound_services == 'all' %}
                    all;
        {% else %}
                    router-discovery;
        {% endif %}
                }
    {% endif %}
            }
    {% if zone.ids_screen is defined %}
            screen {{ zone.ids_screen }};
    {% endif %}
            interfaces {
    {% if zone.interfaces is sequence and zone.interfaces is not string %}
        {% for interface in zone.interfaces %}
                {{ interface }} {
                    host-inbound-traffic {
                        system-services {
        {{ inbound_services(zone, zone_name, true) }}
                        }
                    }
                }
        {% endfor %}
    {% else %}
                {{ zone.interfaces }} {
                    host-inbound-traffic {
                        system-services {
        {{ inbound_services(zone, zone_name, true) }}
                        }
        {% if zone.allowed_inbound_services is defined and zone.allowed_inbound_services == 'all' %}
                        protocols {
                            all;
                        }
        {% endif %}
                    }
                }
    {% endif %}
            }
        }
{% endfor %}
    }
}
{%- endmacro %}

{% macro inbound_services(zone, zone_name, is_interface) %}
    {% if zone.allowed_inbound_services is defined %}
        {% if zone.allowed_inbound_services == 'all' %}
        {% set _inbound = 'all' %}
                    all;
        {% elif zone.allowed_inbound_services is sequence and zone.allowed_inbound_services is not string %}
                    ping;
            {% if not zone_name == 'untrust' %}
                    traceroute;
            {% endif %}
            {% for _service in zone.allowed_inbound_services %}
                {% if is_interface and _service == 'dhcp' %}
                    dhcp;
                    dhcpv6;
                {% elif _service != 'dhcp' %}
                    {{ _service }};
                {% endif %}
            {% endfor %}
        {% else %}
                    ping;
            {% if not zone_name == 'untrust' %}
                    traceroute;
            {% endif %}
            {% if is_interface and zone.allowed_inbound_services == 'dhcp' %}
                    dhcp;
                    dhcpv6;
            {% elif zone.allowed_inbound_services != 'dhcp' %}
                    {{ zone.allowed_inbound_services }};
            {% endif %}
        {% endif %}
    {% else %}
                    ping;
        {% if not zone_name == 'untrust' %}
                    traceroute;
        {% endif %}
    {% endif %}
{% endmacro %}


{# sub template fuer source nat rule config #}

{% macro subtemplate_srcnatrule(_rl, _rl_name) %}
    rule {{ _rl_name }} {
                    match {
            {% if _rl.source is sequence and _rl.source is not string %}
                        source-address [ {% for _src in _rl.source %}{{ _src }} {% endfor %}];
            {% else %}
                        source-address {{ _rl.source }};
            {% endif %}
            {% if _rl.destination is defined %}
                {% if _rl.destination is sequence and _rl.destination is not string %}
                        destination-address [ {% for dest in _rl.destination %}{{ dest }} {% endfor %}];
                {% else %}
                        destination-address {{ _rl.destination }};
                {% endif %}
            {% endif %}
                    }
                    then {
                        source-nat {
            {% if _rl.action == 'interface-nat' %}
                            interface;
            {% elif _rl.action == 'disable-nat' %}
                            off;
            {% else %}
                            pool {
                                {{ _rl.action }};
                            }
            {% endif %}
                        }
                    }
                }
{%- endmacro %}


{# sub template fuer destination nat rule config #}

{% macro subtemplate_destnatrule(_rl, _rl_name) %}
    rule {{ _rl_name }} {
                    match {
            {% if _rl.source is sequence and _rl.source is not string %}
                        source-address [ {% for _src in _rl.source %}{{ _src }} {% endfor %}];
            {% else %}
                        source-address {{ _rl.source }};
            {% endif %}
            {% if _rl.destination is defined %}
                {% if _rl.destination is sequence and _rl.destination is not string %}
                        destination-address [ {% for dest in _rl.destination %}{{ dest }} {% endfor %}];
                {% else %}
                        destination-address {{ _rl.destination }};
                {% endif %}
                        destination-port {{ _rl.port_external }};
            {% endif %}
                    }
                    then {
                        destination-nat pool {{ _rl.action }};
                    }
                }
{%- endmacro %}
